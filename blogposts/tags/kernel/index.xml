<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on Spuckwaffels Blog</title>
    <link>https://spuckwaffel.com/blogposts/tags/kernel/</link>
    <description>Recent content in Kernel on Spuckwaffels Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Spuckwaffel</copyright>
    <lastBuildDate>Tue, 24 Oct 2023 00:57:31 +0200</lastBuildDate><atom:link href="https://spuckwaffel.com/blogposts/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RE-Invent: Byte Patching functions for unfair advantages</title>
      <link>https://spuckwaffel.com/blogposts/posts/byte-patching/</link>
      <pubDate>Tue, 24 Oct 2023 00:57:31 +0200</pubDate>
      
      <guid>https://spuckwaffel.com/blogposts/posts/byte-patching/</guid>
      <description>Disclaimer The RE-Invent blog posts are designed to break down complex information into simpler terms, specifically for beginners learning the basics of Reverse Engineering. These posts are strictly for educational and experimental use and are not intended to target any software. Please ensure to use this knowledge responsibly and in accordance with ethical and legal standards.
Introduction This article expects basic knowledge about sections in applications (.text, .data), offsets, assembly and debugging knowledge.</description>
      <content>&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;The RE-Invent blog posts are designed to break down complex information into simpler terms, specifically for beginners learning the basics of Reverse Engineering. These posts are strictly for educational and experimental use and are not intended to target any software. Please ensure to use this knowledge responsibly and in accordance with ethical and legal standards.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This article expects basic knowledge about sections in applications (&lt;code&gt;.text&lt;/code&gt;, &lt;code&gt;.data&lt;/code&gt;), offsets, assembly and debugging knowledge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Many of us have experienced being stuck in a video game, unable to progress due to resource limitations or not having enough coins to purchase valuable items. Similarly, if you&amp;rsquo;ve ever wanted to use a program beyond its free trial period without paying, you might have wondered about the complexity of manipulating the program to achieve your goal. Large programs can be very intricate, making it challenging for beginners to locate the function responsible for time or coin management. So, where do you begin, and once you succeed, how can you create a program that automatically applies these changes? Let&amp;rsquo;s explore this.&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;Lets split up our final goal into smaller sections.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding the corresponding function and assembly code that checks the coin balance or the time via debugging or reading the programs&amp;rsquo; code&lt;/li&gt;
&lt;li&gt;Creating a pattern so we always find the bytes we have to replace&lt;/li&gt;
&lt;li&gt;Writing a program to write the bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;finding-the-function&#34;&gt;Finding the function&lt;/h2&gt;
&lt;p&gt;To begin, let&amp;rsquo;s first figure out where we need to make changes to a function to achieve the desired result. Consider a program that verifies whether you have sufficient funds to purchase the master sword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//target price stored somewhere in memory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; masterSwordPrice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//function that checks if the balance is enough to buy the sword
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasEnoughMoney&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; balance)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (balance &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; masterSwordPrice)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buyMasterSword&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//get our current balance
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentBalance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(hasEnoughMoney(currentBalance))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Buying the sword...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not enough money...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a user lacks the required funds, they can&amp;rsquo;t purchase the master sword and will receive the message &amp;ldquo;Not enough money&amp;hellip;&amp;rdquo; instead. The critical part here is the &lt;code&gt;hasEnoughMoney&lt;/code&gt; function, which checks if the user has sufficient funds to buy the sword at its specified price. Now, let&amp;rsquo;s examine the assembly code output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasEnoughMoney&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; balance)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;hasEnoughMoney&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@@&lt;/span&gt;YA_NH&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Z proc near      ; Function prologue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; arg_0                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword ptr  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;C &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;          mov     [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;arg_0], ecx           ; Move the balance argument into local stack storage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;B &lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;A &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    mov     eax, cs:&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;masterSwordPrice  ; Load the masterSwordPrice into the EAX &lt;span style=&#34;color:#66d9ef&#34;&gt;register&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00100&lt;/span&gt;A &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;          cmp     [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;arg_0], eax           ; Compare balance with the masterSwordPrice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00100&lt;/span&gt;E &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;C &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;                jl      &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; loc_140001014        ; Jump  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; balance is less than masterSwordPrice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001010&lt;/span&gt; B0 &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;                mov     al, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          ; Set &lt;span style=&#34;color:#a6e22e&#34;&gt;AL&lt;/span&gt; (the lower &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; bits of RAX) to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (indicating enough money)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001012&lt;/span&gt; EB &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;                jmp     &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; locret_140001016     ; Jump to Function epilogue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001014&lt;/span&gt; ; &lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001014&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001014&lt;/span&gt; loc_140001014:                                     ; Jump target &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; balance is insufficient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001014&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; C0                xor     al, al                ;  Set AL to &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (indicating insufficient funds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001016&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001016&lt;/span&gt; locret_140001016:                                  ; Function epilogue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001016&lt;/span&gt; C3                   retn                          ; Return from the function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001016&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;hasEnoughMoney&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@@&lt;/span&gt;YA_NH&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Z endp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As observed, the &lt;code&gt;hasEnoughMoney&lt;/code&gt; function essentially compares the input balance with the masterSwordPrice and makes conditional jumps based on whether the balance is sufficient or not. Our main focus is on the &lt;code&gt;al&lt;/code&gt; register because it holds the function&amp;rsquo;s return value. If &lt;code&gt;al&lt;/code&gt; is 0, the function returns false. In this case, we examine &lt;code&gt;loc_140001014&lt;/code&gt;, which is the point where the value 0 is placed into the &lt;code&gt;al&lt;/code&gt; register.&lt;/p&gt;
&lt;p&gt;The opcode bytes for &lt;code&gt;xor al, al&lt;/code&gt; are &lt;code&gt;32 C0&lt;/code&gt;, a common and efficient way to zero a register. However, it has the same length as the &lt;code&gt;mov al, 1&lt;/code&gt;, &lt;code&gt;B0 01&lt;/code&gt;. So if we would like to always return true, we replace the &lt;code&gt;xor al, al&lt;/code&gt; with &lt;code&gt;mov al, 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The example was clear and had code that was easy to understand. However, imagine a scenario where you can&amp;rsquo;t locate the part of the code where the comparison takes place. This can happen if the function is extensive, intricate, and also purchases the master sword by subtracting its price from your current balance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkBalanceAndBuySword&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;balance)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;checkBalanceAndBuySword&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@@&lt;/span&gt;YA_NAEAH&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Z proc near ; Function prologue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; var_18          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt; arg_0           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword ptr  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001000&lt;/span&gt;                 mov     [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;arg_0], rcx           ; Move balance argument into local stack storage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001005&lt;/span&gt;                 sub     rsp, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h                   ; Allocate space on the stack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00100&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;                 mov     eax, cs:&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;masterSwordPrice  ; Load masterSwordPrice into EAX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00100F&lt;/span&gt;                 mov     [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;var_18], eax      ; Store masterSwordPrice on the stack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001012&lt;/span&gt;                 mov     rax, [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;arg_0]       ; Load the value pointed to by balance into RAX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001017&lt;/span&gt;                 mov     ecx, [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;var_18]      ; Load masterSwordPrice into ECX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00101&lt;/span&gt;A                 cmp     [rax], ecx                 ; Compare the value pointed to by balance with masterSwordPrice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00101&lt;/span&gt;C                 jge     &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; loc_140001022        ; Jump &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; greater or &lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; (indicating sufficient funds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00101&lt;/span&gt;E                 xor     al, al                     ; Set AL to &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (indicating insufficient funds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001020&lt;/span&gt;                 jmp     &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; loc_140001047        ; Function epilogue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001022&lt;/span&gt; ; &lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001022&lt;/span&gt; loc_140001022: ; Jump target &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; balance is sufficient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001036&lt;/span&gt;                 mov     eax, [rax]                 ; Load the value pointed to by balance into EAX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00103&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;                 sub     eax, ecx                   ; Subtract masterSwordPrice from EAX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00103&lt;/span&gt;A                 mov     rcx, [rsp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;arg_0]       ; Reload balance into RCX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00103F&lt;/span&gt;                 mov     [rcx], eax                 ; Update the value pointed to by balance with the &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; balance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001041&lt;/span&gt;                 mov     al, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                      ; Set AL to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (indicating successful purchase)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001043&lt;/span&gt;                 jmp     &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; loc_140001047        ; Function epilogue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001045&lt;/span&gt; ; &lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001045&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001045&lt;/span&gt; loc_140001045:                                     ; Jump target &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; balance is insufficient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001045&lt;/span&gt;                 xor     al, al                     ; Set AL to &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (indicating insufficient funds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001047&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001047&lt;/span&gt; loc_140001047: ; Function epilogue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;001047&lt;/span&gt;                 add     rsp, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;h                   ; Deallocate stack space
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00104&lt;/span&gt;B                 retn                               ; Return from the function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.text:&lt;span style=&#34;color:#ae81ff&#34;&gt;00104&lt;/span&gt;B &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;checkBalanceAndBuySword&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@@&lt;/span&gt;YA_NAEAH&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Z endp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;The assembly code snippet has been trimmed to remove unnecessary parts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This assembly code snippet is much larger and more complex than the previous one, but the key part to focus on is &lt;code&gt;loc_140001022&lt;/code&gt;. Here, the balance is subtracted and updated. Typically, you need to track movements from global variables, like &lt;code&gt;mov eax, cs:?masterSwordPrice&lt;/code&gt;, which eventually ends up in the &lt;code&gt;ecx&lt;/code&gt; register, or observe what happens with the &lt;code&gt;rcx&lt;/code&gt; register, the pointer to our balance. The balance pointer is moved into the stack at &lt;code&gt;[rsp+arg_0]&lt;/code&gt;, later loaded into &lt;code&gt;rax&lt;/code&gt;, and in &lt;code&gt;loc_140001022&lt;/code&gt;, the balance value is read and stored in &lt;code&gt;eax&lt;/code&gt; using &lt;code&gt;mov eax, [rax].&lt;/code&gt; It&amp;rsquo;s evident that &lt;code&gt;sub eax, ecx&lt;/code&gt; calculates the new balance and writes it back into the balance pointer.&lt;/p&gt;
&lt;p&gt;For our purpose of always getting a sword without spending money, we just need to replace &lt;code&gt;jge loc_140001022&lt;/code&gt; with &lt;code&gt;jmp loc_140001022&lt;/code&gt; and &lt;code&gt;sub eax, ecx&lt;/code&gt; with &lt;code&gt;add eax, ecx&lt;/code&gt;. All the opcode bytes are the same length, so replacing a total of 4 bytes is sufficient for unlimited swords and funds.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-pattern&#34;&gt;Creating a pattern&lt;/h2&gt;
&lt;p&gt;Now, we create a suitable pattern for our pattern scanner in our program, which will replace specific bytes. The first pattern we need is for &lt;code&gt;jge loc_140001022&lt;/code&gt;, so that the money addition code runs, regardless of the balance. The opcode bytes &lt;code&gt;7D 04&lt;/code&gt; are quite short, so we combine them with the opcode bytes &lt;code&gt;32 C0 EB 25&lt;/code&gt; from the two assembly instructions below. This results in the final pattern &lt;code&gt;7D 04 32 C0 EB 25&lt;/code&gt;. Technically, we could replace the second and last byte of the pattern with wildcards because the conditional jump offsets might change, but it&amp;rsquo;s highly unlikely that a function solely checking the balance and buying a sword will change in the future.&lt;/p&gt;
&lt;p&gt;As for the &lt;code&gt;sub eax, ecx&lt;/code&gt; with the opcode bytes &lt;code&gt;2B C1&lt;/code&gt;, we add the opcode bytes &lt;code&gt;48 8B 4C 24 20&lt;/code&gt; from the assembly instruction below, resulting in the final pattern &lt;code&gt;2B C1 48 8B 4C 24 20&lt;/code&gt;. These two patterns are unique enough for our program.&lt;/p&gt;
&lt;p&gt;Now, we just need to find the corresponding patched opcode bytes: a &lt;code&gt;jmp loc_140001022&lt;/code&gt; has the opcode bytes &lt;code&gt;EB 04&lt;/code&gt;, and an &lt;code&gt;add eax, ecx&lt;/code&gt; has the opcode bytes &lt;code&gt;01 C8&lt;/code&gt;. That&amp;rsquo;s all there is to it.&lt;/p&gt;
&lt;h2 id=&#34;writing-the-program&#34;&gt;Writing the program&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I won&amp;rsquo;t provide a detailed explanation of how the Windows API functions work; instead, I&amp;rsquo;ll demonstrate how to use them with an example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To develop a program that can alter a target process&amp;rsquo;s memory, we need to utilize Windows APIs to initially acquire a handle to the target process with the required permissions to read and write memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DWORD targetProcessID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Open the target process with full access.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;HANDLE hProcess &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetProcessID);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to obtain the address of the patterns so that we can correctly insert our opcode bytes into the target process at the right location.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; jmpAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAddressByPattern(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7D 04 32 C0 EB 25&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; subAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAddressByPattern(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2B C1 48 8B 4C 24 20&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Now, how do we write?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only remaining problem is that the &lt;code&gt;.text&lt;/code&gt; section of the target process is not initially writable. Attempting to write to the &lt;code&gt;.text&lt;/code&gt; section will trigger an exception. To address this issue, we must modify the protection of the page by utilizing the &lt;code&gt;VirtualProtectEx&lt;/code&gt; function, perform the necessary write operation, and afterward, restore the page protection to its original state. We can employ the &lt;code&gt;WriteProcessMemory&lt;/code&gt; function to write our data in the specified location within the target process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Change memory protection to PAGE_EXECUTE_READWRITE.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We use the for the dwSize subAddress - jmpAddress + 2, because we change the protection from jmpAddress to subAddress + 2 because of the two bytes we have replace at the subAddress.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DWORD oldProtect;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (VirtualProtectEx(hProcess, (LPVOID)jmpAddress, subAddress &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; jmpAddress &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, PAGE_EXECUTE_READWRITE, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;oldProtect)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//our jmp opcode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; jmpOpcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xEB\x04&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Write data to the target process.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  SIZE_T bytesWritten;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WriteProcessMemory(hProcess, (LPVOID)jmpAddress, jmpOpcode, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bytesWritten);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//our sub opcode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; subOpcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\xC8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Write data to the target process.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  WriteProcessMemory(hProcess, (LPVOID)subAddress, subOpcode, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bytesWritten);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Restore the original memory protection.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  VirtualProtectEx(hProcess, (LPVOID)jmpAddress, subAddress &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; jmpAddress &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, oldProtect, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;oldProtect);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before patching:
&lt;img src=&#34;https://spuckwaffel.com/blogposts/blogposts/BytePatching-1.png&#34; alt=&#34;Image showing the unpatched program&#34;&gt;&lt;/p&gt;
&lt;p&gt;After patching:
&lt;img src=&#34;https://spuckwaffel.com/blogposts/blogposts/BytePatching-2.png&#34; alt=&#34;Image showing the patched program&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Understanding assembly code and logic is an essential skill when it comes to patching programs. Once you grasp the fundamentals, the process remains consistent. This knowledge is incredibly potent and applicable to a wide range of software, enabling you to circumvent paywalls and enhance your experience in various applications, particularly in offline games. However, a word of caution: in the realm of byte-patching, altering the wrong bytes can lead to the complete failure of the program. Therefore, while it grants great power, it must be wielded with care and responsibility.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
